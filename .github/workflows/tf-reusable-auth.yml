name: '[Reusable|Auth] Terraform Create Service Account and Export Client Credentials'

on:
  workflow_call:
    outputs:
      AZURE_CLIENT_ID:
        description: |
          Azure Service Account Client ID for authentication
        value: ${{ jobs.reusable-auth.outputs.AZURE_CLIENT_ID }}
      AZURE_CLIENT_SECRET:
        description: |
          Azure Service Account Client Secret for Authentication (when running locally)
        value: ${{ jobs.reusable-auth.outputs.AZURE_CLIENT_SECRET }}
      AZURE_APPLICATION_ID:
        description: |
          Azure Service Account Client Application ID for Identity Federation Creation
        value: ${{ jobs.reusable-auth.outputs.AZURE_APPLICATION_ID }}
      SECURITY_GROUP_ID:
        description: |
            Microsoft Entra ID Security Group ID
        value: ${{ jobs.reusable-auth.outputs.SECURITY_GROUP_ID }}


    inputs:
      ACT_MODE:
        description: |
          For running Github Action Workflows locally with Nektos act
        required: true
        type: boolean
      targets:
        description: |
          Specify Terraform resources/modules within the tf scripts to target with the -target command line.
          The "targets" input is a comma seperated string of possible resources/modules to scope into plan.
          Example: module.service_account_auth,data.google_project.this,google_iam_workload_identity_pool_provider.this
        required: false
        type: string
        default: module.azure_service_account
      working_directory:
        description: |
          Working directory containing Terraform test scripts.
        required: false
        type: string
        default: "./test"
      base64_encoding:
        description: |
          Flag to encode output variables with double base64 encoding.
        required: false
        type: string
        default: \| base64 -w0 | base64 -w0

    
    secrets:
      AZURE_CLIENT_ID:
        description: |
          Azure Service Account Client ID for authentication
        required: true
      AZURE_CLIENT_SECRET:
        description: |
          Azure Service Account Client Secret for Authentication (when running locally)
        required: true
      AZURE_SUBSCRIPTION_ID:
        description: |
          Azure Subscription ID
        required: true
      AZURE_TENANT_ID:
        description: |
          Azure Tenant ID
        required: true
      TF_API_TOKEN:
        description: |
          Terraform.io Access Token
        required: true

#Special permissions required for OIDC authentication
permissions:
  id-token: write
  contents: read

#These environment variables are used by the terraform azure provider to setup OIDD authenticate. 
env:
    ARM_USE_OIDC: "${{ !!inputs.ACT_MODE  && 'false' || 'true' }}"
    ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
    ARM_CLIENT_SECRET: "${{ !!inputs.ACT_MODE && secrets.AZURE_CLIENT_SECRET || null }}"
    ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
    ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"
jobs:
  reusable-auth:
    name: 'Terraform Authenticate'
    environment: production
    runs-on: ubuntu-latest

    outputs:
      AZURE_CLIENT_ID: "${{ steps.tf-raw.outputs.AZURE_CLIENT_ID }}"
      AZURE_CLIENT_SECRET: "${{ steps.tf-raw.outputs.AZURE_CLIENT_SECRET }}"
      AZURE_APPLICATION_ID: "${{ steps.tf-raw.outputs.AZURE_APPLICATION_ID }}"
      SECURITY_GROUP_ID: "${{ steps.tf-raw.outputs.SECURITY_GROUP_ID }}"
      
    defaults:
        run:
          working-directory: "${{ inputs.working_directory }}"

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of the Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
        terraform_wrapper: false

    - name: Terraform Init
      run: terraform init

    - name: Terraform Apply
      run: |
        command_targets=""
        targets=($(echo "${{ inputs.targets }}" | tr ',' '\n'))
        for t in ${targets[@]}
        do
          command_targets+=" -target $t"
        done

        terraform apply --auto-approve $command_targets
    
    - name: terraform raw output
      id: tf-raw
      run: |
        echo "::add-mask::$(terraform output -raw service_account_client_secret)"
        if ${{ !!inputs.ACT_MODE }}
        then
            echo "AZURE_CLIENT_SECRET=$(terraform output -raw service_account_client_secret ${{ inputs.base64_encoding }})" >> $GITHUB_OUTPUT
        fi
        echo "AZURE_CLIENT_ID=$(terraform output -raw service_account_client_id ${{ inputs.base64_encoding }})
        AZURE_APPLICATION_ID=$(terraform output -raw service_account_application_id ${{ inputs.base64_encoding }})
        SECURITY_GROUP_ID=$(terraform output -raw security_group_id ${{ inputs.base64_encoding }})" >> $GITHUB_OUTPUT
