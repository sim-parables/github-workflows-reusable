name: '[Reusable|Dispatch] Terraform Read'

on:
  workflow_call:
    inputs:
      ACT_MODE:
        description: |
          For running Github Action Workflows locally with Nektos act
        required: true
        type: boolean
      DATABRICKS_ADMINISTRATOR:
        description: |
          Databricks Accounts Administrator user account (not for machine access)
        required: true
        type: string
      DATABRICKS_PROFILE:
        description: |
          Databricks CLI configuration profile name for Databricks Accounts configuration/credentials
        required: false
        type: string
        default: AWS_ACCOUNTS
      targets:
        description: |
          Specify Terraform resources/modules within the tf scripts to target with the -target command line.
          The "targets" input is a comma seperated string of possible resources/modules to scope into plan.
          Example: module.service_account_auth,data.google_project.this,google_iam_workload_identity_pool_provider.this
        required: false
        type: string
        default: null
      mask:
        description: |
          Flag to mask environment variables
        required: false
        type: boolean
        default: true
      working_directory:
        description: |
          Working directory containing Terraform test scripts.
        required: false
        type: string
        default: "./test"
      token_lifetime:
        description: |
          AWS STS Token Lifetime in seconds
        required: false
        type: number
        default: 1200
      token_retries:
        description: |
          AWS STS Token request retry attempts
        required: false
        type: number
        default: 3
    
    secrets:
      env_variables:
        description: |
          Passing ENV Variables from parent level workflow to reusable workflow
          https://github.com/orgs/community/discussions/26671#discussioncomment-6776498

          Possible ENV Variables include
          secrets:
            env_variables:
              TF_VAR_GITHUB_REPOSITORY_OWNER="$\{{ github.repository_owner }}"
              TF_VAR_GITHUB_REPOSITORY="$\{{ github.repository }}"
              TF_VAR_GITHUB_REF="$\{{ github.ref }}"
              TF_VAR_GITHUB_ENV=production

        required: false
      AWS_CLIENT_ID:
        description: |
          AWS Service Account Client ID for authentication
        required: true
      AWS_CLIENT_SECRET:
        description: |
          AWS Service Account Client Secret for Authentication (when running locally)
        required: true
      AWS_REGION:
        description: |
          AWS Account Region
        required: false
      AWS_ROLE_TO_ASSUME:
        description: |
          AWS role to assume when asking for Security Token Service (STS) to provide a set of temporary credentials
        required: false
      TF_API_TOKEN:
        description: |
          Terraform.io Access Token
        required: true
      AWS_DATABRICKS_ACCOUNT_ID:
        description: |
          AWS Databricks Accounts Account ID
        required: true
      AWS_DATABRICKS_ACCOUNT_CLIENT_ID:
        description: |
          AWS Databricks Accounts Client ID with Admin Permissions
        required: true
      AWS_DATABRICKS_ACCOUNT_CLIENT_SECRET:
        description: |
          AWS Databricks Accounts Client Secret with Admin Permissions
        required: true

#Special permissions required for OIDC authentication
permissions:
  id-token: write
  contents: read

env:
  TF_VAR_DATABRICKS_ADMINISTRATOR: "${{ inputs.DATABRICKS_ADMINISTRATOR }}"
  TF_VAR_DATABRICKS_CLI_PROFILE: "${{ inputs.DATABRICKS_PROFILE }}"
  TF_VAR_DATABRICKS_ACCOUNT_ID: "${{ secrets.AZURE_DATABRICKS_ACCOUNT_ID }}"

jobs:
  reusable-dispatch-plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    
    defaults:
        run:
          working-directory: "${{ inputs.working_directory }}"

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Decode Environment Variables
      env:
        env_vars: ${{ secrets.env_variables }}
      run: |
        for i in $env_vars; do
          i=$(echo $i | sed 's/=.*//g')=$(echo ${i#*=} | base64 -di | base64 -di)
          if ${{ inputs.mask }}
          then
            echo ::add-mask::${i#*=}
          fi
          printf '%s\n' "$i" >> $GITHUB_ENV
        done
    
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ !!inputs.ACT_MODE && secrets.AWS_CLIENT_ID || null }}
        aws-secret-access-key: ${{ !!inputs.ACT_MODE && secrets.AWS_CLIENT_SECRET || null }}
        aws-region: ${{ secrets.AWS_REGION }}
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        role-duration-seconds: ${{ inputs.token_lifetime }}
        role-skip-session-tagging: true
        mask-aws-account-id: true
        retry-max-attempts: ${{ inputs.token_retries }}

    # Install the latest version of the Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
        terraform_wrapper: false
    
    # Databricks offers Workload Identity Federation from Databricks Accounts
    # to Databricks Workspaces via SCIM connectors to cloud providers. However,
    # Github is not a recognized Identity Federation/Open ID Connect from Databricks Accounts
    # authorization at this time. Therefore, providing client secrets via GA
    # Secrets is necessary until advances are made with Databricks Accounts WIF/OIDC.
    - name: Databricks Accounts Configuration
      run: |
        echo "[${{ inputs.DATABRICKS_PROFILE }}]
        host          = https://accounts.cloud.databricks.com
        account_id    = ${{ secrets.AWS_DATABRICKS_ACCOUNT_ID }}
        client_id     = ${{ secrets.AWS_DATABRICKS_ACCOUNT_CLIENT_ID }}
        client_secret = ${{ secrets.AWS_DATABRICKS_ACCOUNT_CLIENT_SECRET }}
        jobs-api-version = 2.1" > ~/.databrickscfg

    - name: Terraform Init
      run: terraform init

    - name: Terraform plan
      run: |
        if [ "${{ inputs.targets }}" == "all" ]
        then
          terraform plan --auto-approve
        else
          command_targets=""
          targets=($(echo "${{ inputs.targets }}" | tr ',' '\n'))
          for t in ${targets[@]}
          do
            command_targets+=" -target $t"
          done

          terraform plan $command_targets
        fi