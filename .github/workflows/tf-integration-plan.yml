# Original Work: https://github.com/Azure-Samples/terraform-github-actions/blob/main/.github/workflows/tf-plan-apply.yml

name: '[Reusable] Terraform Plan'

on:
  workflow_call:
    inputs:
      ACT_MODE:
        required: true
        type: boolean
    
    secrets:
      GCP_IMPERSONATE_SERVICE_ACCOUNT_EMAIL:
        required: true
      GCP_PROJECT:
        required: true
      GCP_WORKLOAD_IDENTITY_PROVIDER:
        required: false
      GOOGLE_OAUTH_ACCESS_TOKEN:
        required: false
      TF_API_TOKEN:
        required: true
    
    outputs:
      TF_PLAN_PATH: 
        description: "Terraform Plan Artifact Path"
        value: ${{ jobs.reusable-integration-plan.outputs.TF_PLAN_PATH }}
      TF_PLAN_NAME: 
        description: "Terraform Plan Artifact Name" 
        value: ${{ jobs.reusable-integration-plan.outputs.TF_PLAN_NAME }}
      TF_PLAN_EXIT_CODE: 
        description: |
          Terraform Plan Exit Code
          An exit code of 0 indicated no changes, 1 a terraform failure, 2 there are pending changes.
        value: ${{ jobs.reusable-integration-plan.outputs.TF_PLAN_EXIT_CODE }}

#Special permissions required for OIDC authentication
permissions:
  id-token: write
  contents: read

env:
  GOOGLE_PROJECT: "${{ secrets.GCP_PROJECT }}"
  GOOGLE_OAUTH_ACCESS_TOKEN: "${{ secrets.GOOGLE_OAUTH_ACCESS_TOKEN }}"
  TF_VAR_IMPERSONATE_SERVICE_ACCOUNT_EMAIL: "${{ secrets.GCP_IMPERSONATE_SERVICE_ACCOUNT_EMAIL }}"
  TF_VAR_GITHUB_REPOSITORY_OWNER: "${{ github.repository_owner }}"
  TF_VAR_GITHUB_REPOSITORY: "${{ github.repository }}"
  TF_VAR_GITHUB_REF: "${{ github.ref }}"
  TF_VAR_GITHUB_ENV: production

jobs:
  reusable-integration-plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    
    defaults:
        run:
          working-directory: "./test"
    env:
      #this is needed since we are running terraform with read-only permissions
      ARM_SKIP_PROVIDER_REGISTRATION: true
    
    outputs:
      TF_PLAN_EXIT_CODE: "${{ steps.tfplan.outputs.exitcode }}"
      TF_PLAN_PATH: "${{ steps.tf-plan-upload.outputs.artifact-url }}"
      TF_PLAN_NAME: "tfplan"

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Configure GCP Credentials - Github Runner
      uses: 'google-github-actions/auth@v2'
      if: ${{ !inputs.ACT_MODE }}
      with:
        service_account: "${{ secrets.GCP_IMPERSONATE_SERVICE_ACCOUNT_EMAIL }}"
        workload_identity_provider: "${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}"

    # Install the latest version of the Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
        terraform_wrapper: false

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    # Will fail the build if not
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    # An exit code of 0 indicated no changes, 1 a terraform failure, 2 there are pending changes.
    - name: Terraform Plan
      id: tfplan
      run: |
        export exitcode=0
        terraform plan -detailed-exitcode -no-color -out tfplan || export exitcode=$?

        echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
        
        if [ $exitcode -eq 1 ]; then
          echo Terraform Plan Failed!
          exit 1
        else 
          exit 0
        fi
        
    # Save plan to artifacts  
    - name: Publish Terraform Plan
      id: tf-plan-upload
      uses: actions/upload-artifact@v3
      with:
        name: tfplan
        path: test/tfplan
        
    # Create string output of Terraform Plan
    - name: Create String Output
      id: tf-plan-string
      run: |
        TERRAFORM_PLAN=$(terraform show -no-color tfplan)
        
        delimiter="$(openssl rand -hex 8)"
        echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
        echo "## Terraform Plan Output" >> $GITHUB_OUTPUT
        echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo '```terraform' >> $GITHUB_OUTPUT
        echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
        echo '```' >> $GITHUB_OUTPUT
        echo "</details>" >> $GITHUB_OUTPUT
        echo "${delimiter}" >> $GITHUB_OUTPUT
        
    # Publish Terraform Plan as task summary
    - name: Publish Terraform Plan to Task Summary
      env:
        SUMMARY: ${{ steps.tf-plan-string.outputs.summary }}
      run: |
        echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY
      
    # If this is a PR post the changes
    - name: Push Terraform Output to PR
      if: ${{ !inputs.ACT_MODE  && github.ref != 'refs/heads/main' }}
      uses: actions/github-script@v7
      env:
        SUMMARY: "${{ steps.tf-plan-string.outputs.summary }}"
      with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const body = `${process.env.SUMMARY}`;
            github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
            })