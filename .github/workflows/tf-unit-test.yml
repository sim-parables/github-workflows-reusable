# Original work: https://github.com/Azure-Samples/terraform-github-actions/blob/main/.github/workflows/tf-unit-tests.yml

name: '[Reusable] Terraform Unit Tests'

on:
  workflow_call:
    inputs:
      ACT_MODE:
        required: true
        type: boolean
      SKIP_CHECKS:
        required: false
        type: string
      working_directory:
        description: |
          Working directory containing Terraform test scripts.
        required: false
        type: string
        default: "./test"
     
    secrets:
      TF_API_TOKEN:
        required: true

permissions:
  security-events: write # Needed to upload-sarif
  contents: read # Needed to clone repo
  actions: read # Potentially needed for private repositories (see https://github.com/github/codeql-action/issues/2117)

env:
  TF_VAR_GITHUB_REPOSITORY_OWNER: "${{ github.repository_owner }}"
  TF_VAR_GITHUB_REPOSITORY: "${{ github.repository }}"
  TF_VAR_GITHUB_REF: "${{ github.ref }}"
  TF_VAR_GITHUB_ENV: production

jobs:
  reusable-unit-tests:
    name: 'Terraform Unit Tests'
    if: github.actor != 'github-actions[bot]'
    runs-on: ubuntu-latest
    defaults:
        run:
          working-directory: ${{ inputs.working_directory }}
    
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init -backend=false

    # Validate terraform files
    - name: Terraform Validate
      run: terraform validate

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check -recursive
    
    # Perform a security scan of the terraform code using checkov
    - name: Run Checkov action
      id: checkov
      uses: bridgecrewio/checkov-action@master
      with: 
        framework: terraform
        skip_check: ${{ inputs.SKIP_CHECKS }}

    # Upload results to GitHub Advanced Security
    - name: Upload SARIF file
      if: ${{ !github.event.act && success() || !github.event.act && failure() }}
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: results.sarif
        category: checkov