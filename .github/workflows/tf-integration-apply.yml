# Original Work: https://github.com/Azure-Samples/terraform-github-actions/blob/main/.github/workflows/tf-plan-apply.yml

name: '[Reusable] Terraform Apply'

on:
  workflow_call:
    inputs:
      ACT_MODE:
        description: |
          For running Github Action Workflows locally with Nektos act
        required: true
        type: boolean
      TF_PLAN_PATH:
        description: |
          Terraform Plan Artifact Path
        required: false
        type: string
        default: ''
      TF_PLAN_NAME:
        description: |
          Terraform Plan Artifact Name 
        required: false
        type: string
        default: ''
      mask:
        description: |
          Flag to mask environment variables
        required: false
        type: boolean
        default: true
      working_directory:
        description: |
          Working directory containing Terraform test scripts.
        required: false
        type: string
        default: "./test"
      token_lifetime:
        description: |
          AWS STS Token Lifetime in seconds
        required: false
        type: number
        default: 1200
      token_retries:
        description: |
          AWS STS Token request retry attempts
        required: false
        type: number
        default: 3

    secrets:
      env_variables:
        description: |
          Passing ENV Variables from parent level workflow to reusable workflow
          https://github.com/orgs/community/discussions/26671#discussioncomment-6776498

          Possible ENV Variables include
          secrets:
            env_variables:
              TF_VAR_WIF_ID="$\{{ github.run_id}}-$\{{github.run_attempt}}"
              TF_VAR_GITHUB_REPOSITORY_OWNER="$\{{ github.repository_owner }}"
              TF_VAR_GITHUB_REPOSITORY="$\{{ github.repository }}"
              TF_VAR_GITHUB_REF="$\{{ github.ref }}"
              TF_VAR_GITHUB_ENV=production

        required: false
      AWS_CLIENT_ID:
        description: |
          AWS Service Account Client ID for authentication
        required: true
      AWS_CLIENT_SECRET:
        description: |
          AWS Service Account Client Secret for Authentication (when running locally)
        required: true
      AWS_REGION:
        description: |
          AWS Account Region
        required: false
      AWS_ROLE_TO_ASSUME:
        description: |
          AWS role to assume when asking for Security Token Service (STS) to provide a set of temporary credentials
        required: false
      TF_API_TOKEN:
        description: |
          Terraform.io Access Token
        required: true

#Special permissions required for OIDC authentication
permissions:
  id-token: write
  contents: read

jobs:
  reusable-integration-apply:
    name: 'Terraform Apply'
    environment: production
    runs-on: ubuntu-latest
    
    defaults:
        run:
          working-directory: "${{ inputs.working_directory }}"

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Decode Environment Variables
      env:
        env_vars: ${{ secrets.env_variables }}
      run: |
        for i in $env_vars; do
          i=$(echo $i | sed 's/=.*//g')=$(echo ${i#*=} | base64 -di | base64 -di)
          if ${{ inputs.mask }}
          then
            echo ::add-mask::${i#*=}
          fi
          printf '%s\n' "$i" >> $GITHUB_ENV
        done
    
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ !!inputs.ACT_MODE && secrets.AWS_CLIENT_ID || null }}
        aws-secret-access-key: ${{ !!inputs.ACT_MODE && secrets.AWS_CLIENT_SECRET || null }}
        aws-region: ${{ secrets.AWS_REGION }}
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        role-duration-seconds: ${{ inputs.token_lifetime }}
        role-skip-session-tagging: true
        mask-aws-account-id: true
        retry-max-attempts: ${{ inputs.token_retries }}

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Download saved plan from artifacts  
    - name: Download Terraform Plan
      id: tf-plan-download
      if: ${{ inputs.TF_PLAN_NAME != '' && inputs.TF_PLAN_PATH != '' }}
      uses: actions/download-artifact@v3
      with:
        name: ${{ inputs.TF_PLAN_NAME }}
        path: ${{ inputs.TF_PLAN_PATH }}

    # Terraform Apply
    - name: Terraform Apply
      run: |
        if ${{ inputs.TF_PLAN_NAME != '' && inputs.TF_PLAN_PATH != '' }}
        then
          terraform apply -auto-approve ${{ steps.tf-plan-download.outputs.download-path }}/${{ inputs.TF_PLAN_NAME }}
        else
          terraform apply -auto-approve
        fi