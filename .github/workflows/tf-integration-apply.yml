# Original Work: https://github.com/Azure-Samples/terraform-github-actions/blob/main/.github/workflows/tf-plan-apply.yml

name: '[Reusable] Terraform Apply'

on:
  workflow_call:
    inputs:
      ACT_MODE:
        description: |
          For running Github Action Workflows locally with Nektos act
        required: true
        type: boolean
      TF_PLAN_PATH:
        description: |
          Terraform Plan Artifact Path
        required: false
        type: string
        default: ''
      TF_PLAN_NAME:
        description: |
          Terraform Plan Artifact Name 
        required: false
        type: string
        default: ''
      DATABRICKS_ADMINISTRATOR:
        description: |
          Databricks Accounts Administrator user account (not for machine access)
        required: true
        type: string
      DATABRICKS_PROFILE:
        description: |
          Databricks CLI configuration profile name for Databricks Accounts configuration/credentials
        required: false
        type: string
        default: AZURE_ACCOUNTS
      mask:
        description: |
          Flag to mask environment variables
        required: false
        type: boolean
        default: true
      working_directory:
        description: |
          Working directory containing Terraform test scripts.
        required: false
        type: string
        default: "./test"

    secrets:
      env_variables:
        description: |
          Passing ENV Variables from parent level workflow to reusable workflow
          https://github.com/orgs/community/discussions/26671#discussioncomment-6776498

          Possible ENV Variables include
          secrets:
            env_variables:
              TF_VAR_WIF_ID="$\{{ github.run_id}}-$\{{github.run_attempt}}"
              TF_VAR_GITHUB_REPOSITORY_OWNER="$\{{ github.repository_owner }}"
              TF_VAR_GITHUB_REPOSITORY="$\{{ github.repository }}"
              TF_VAR_GITHUB_REF="$\{{ github.ref }}"
              TF_VAR_GITHUB_ENV=production

        required: false
      AZURE_CLIENT_ID:
        description: |
          Azure Service Account Client ID for authentication
        required: true
      AZURE_CLIENT_SECRET:
        description: |
          Azure Service Account Client Secret for Authentication (when running locally)
        required: true
      AZURE_SUBSCRIPTION_ID:
        description: |
          Azure Subscription ID
        required: true
      AZURE_TENANT_ID:
        description: |
          Azure Tenant ID
        required: true
      TF_API_TOKEN:
        description: |
          Terraform.io Access Token
        required: true
      AZURE_DATABRICKS_ACCOUNT_ID:
        description: |
          Azure Databricks Accounts Account ID
        required: true
      AZURE_DATABRICKS_ACCOUNT_CLIENT_ID:
        description: |
          Azure Databricks Accounts Client ID with Admin Permissions
        required: true
      AZURE_DATABRICKS_ACCOUNT_CLIENT_SECRET:
        description: |
          Azure Databricks Accounts Client Secret with Admin Permissions
        required: true

#Special permissions required for OIDC authentication
permissions:
  id-token: write
  contents: read

#These environment variables are used by the terraform azure provider to setup OIDD authenticate. 
env:
    ARM_USE_OIDC: "${{ !!inputs.ACT_MODE  && 'false' || 'true' }}"
    ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
    ARM_CLIENT_SECRET: "${{ !!inputs.ACT_MODE && secrets.AZURE_CLIENT_SECRET || null }}"
    ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
    ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"
    TF_VAR_DATABRICKS_ADMINISTRATOR: "${{ inputs.DATABRICKS_ADMINISTRATOR }}"
    TF_VAR_DATABRICKS_CLI_PROFILE: "${{ inputs.DATABRICKS_PROFILE }}"

jobs:
  reusable-integration-apply:
    name: 'Terraform Apply'
    environment: production
    runs-on: ubuntu-latest
    
    defaults:
        run:
          working-directory: "${{ inputs.working_directory }}"

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Decode Environment Variables
      env:
        env_vars: ${{ secrets.env_variables }}
      run: |
        for i in $env_vars; do
          i=$(echo $i | sed 's/=.*//g')=$(echo ${i#*=} | base64 -di | base64 -di)
          if ${{ inputs.mask }}
          then
            echo ::add-mask::${i#*=}
          fi
          printf '%s\n' "$i" >> $GITHUB_ENV
        done

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
    
    # Databricks offers Workload Identity Federation from Databricks Accounts
    # to Databricks Workspaces via SCIM connectors to cloud providers. However,
    # no Identity Federation/Open ID Connect exists for Databricks Accounts
    # authorization at this time. Therefore, providing client secrets via GA
    # Secrets is necessary until advances are made with Databricks Accounts WIF/OIDC.
    - name: Databricks Accounts Configuration
      run: |
        echo "[${{ inputs.DATABRICKS_PROFILE }}]
        host          = https://accounts.azuredatabricks.net
        account_id    = ${{ secrets.AZURE_DATABRICKS_ACCOUNT_ID }}
        client_id     = ${{ secrets.AZURE_DATABRICKS_ACCOUNT_CLIENT_ID }}
        client_secret = ${{ secrets.AZURE_DATABRICKS_ACCOUNT_CLIENT_SECRET }}
        jobs-api-version = 2.1" > ~/.databrickscfg

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Download saved plan from artifacts  
    - name: Download Terraform Plan
      id: tf-plan-download
      if: ${{ inputs.TF_PLAN_NAME != '' && inputs.TF_PLAN_PATH != '' }}
      uses: actions/download-artifact@v3
      with:
        name: ${{ inputs.TF_PLAN_NAME }}
        path: ${{ inputs.TF_PLAN_PATH }}

    # Terraform Apply
    - name: Terraform Apply
      run: |
        if ${{ inputs.TF_PLAN_NAME != '' && inputs.TF_PLAN_PATH != '' }}
        then
          terraform apply -auto-approve ${{ steps.tf-plan-download.outputs.download-path }}/${{ inputs.TF_PLAN_NAME }}
        else
          terraform apply -auto-approve
        fi