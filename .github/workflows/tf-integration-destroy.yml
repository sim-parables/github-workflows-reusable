# Original Work: https://github.com/Azure-Samples/terraform-github-actions/blob/main/.github/workflows/tf-plan-apply.yml

name: '[Reusable] Terraform Destroy'

on:
  workflow_call:
    inputs:
      ACT_MODE:
        description: |
          For running Github Action Workflows locally with Nektos act
        required: true
        type: boolean
      DATABRICKS_ADMINISTRATOR:
        description: |
          Databricks Accounts Administrator user account (not for machine access)
        required: true
        type: string
      DATABRICKS_PROFILE:
        description: |
          Databricks CLI configuration profile name for Databricks Accounts configuration/credentials
        required: false
        type: string
        default: GCP_ACCOUNTS
      mask:
        description: |
          Flag to mask environment variables
        required: false
        type: boolean
        default: true
      working_directory:
        description: |
          Working directory containing Terraform test scripts.
        required: false
        type: string
        default: "./test"
    
    secrets:
      env_variables:
        description: |
          Passing ENV Variables from parent level workflow to reusable workflow
          https://github.com/orgs/community/discussions/26671#discussioncomment-6776498

          Possible ENV Variables include
          secrets:
            env_variables:
              TF_VAR_WIF_ID="$\{{ github.run_id}}-$\{{github.run_attempt}}"
              TF_VAR_GITHUB_REPOSITORY_OWNER="$\{{ github.repository_owner }}"
              TF_VAR_GITHUB_REPOSITORY="$\{{ github.repository }}"
              TF_VAR_GITHUB_REF="$\{{ github.ref }}"
              TF_VAR_GITHUB_ENV=production

        required: false
      GOOGLE_IMPERSONATE_SERVICE_ACCOUNT_EMAIL:
        description: |
          Google Cloud Service Account Impersonator for authentication
        required: true
      GOOGLE_PROJECT:
        description: |
          Google Cloud Project ID
        required: true
      GOOGLE_WORKLOAD_IDENTITY_PROVIDER:
        description: |
          Google Cloud Workload Identity Federation Provider Member ID
        required: false
      GOOGLE_OAUTH_ACCESS_TOKEN:
        description: |
          Google Cloud OAauth2 Access Token
        required: false
      GOOGLE_DATABRICKS_ACCOUNT_ID:
        description: |
          GCP Databricks Accounts Account ID
        required: true
      GOOGLE_DATABRICKS_ACCOUNT_CLIENT_ID:
        description: |
          GCP Databricks Accounts Client ID with Admin Permissions
        required: true
      GOOGLE_DATABRICKS_ACCOUNT_CLIENT_SECRET:
        description: |
          GCP Databricks Accounts Client Secret with Admin Permissions
        required: true
      TF_API_TOKEN:
        description: |
          Terraform.io Access Token
        required: true

#Special permissions required for OIDC authentication
permissions:
  id-token: write
  contents: read

env:
  GOOGLE_PROJECT: "${{ secrets.GOOGLE_PROJECT }}"
  GOOGLE_OAUTH_ACCESS_TOKEN: "${{ secrets.GOOGLE_OAUTH_ACCESS_TOKEN }}"
  TF_VAR_IMPERSONATE_SERVICE_ACCOUNT_EMAIL: "${{ secrets.GOOGLE_IMPERSONATE_SERVICE_ACCOUNT_EMAIL }}"
  TF_VAR_DATABRICKS_ADMINISTRATOR: "${{ inputs.DATABRICKS_ADMINISTRATOR }}"
  TF_VAR_DATABRICKS_CLI_PROFILE: "${{ inputs.DATABRICKS_PROFILE }}"
  TF_VAR_DATABRICKS_ACCOUNT_ID: "${{ secrets.GOOGLE_DATABRICKS_ACCOUNT_ID }}"

jobs:
  reusable-integration-destroy:
    name: 'Terraform Destroy'
    environment: production
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Decode Environment Variables
      env:
        env_vars: ${{ secrets.env_variables }}
      run: |
        for i in $env_vars; do
          i=$(echo $i | sed 's/=.*//g')=$(echo ${i#*=} | base64 -di | base64 -di)
          if ${{ inputs.mask }}
          then
            echo ::add-mask::${i#*=}
          fi
          printf '%s\n' "$i" >> $GITHUB_ENV
        done
    
    - name: Configure GCP Credentials - Github Runner
      uses: 'google-github-actions/auth@v2'
      if: ${{ !inputs.ACT_MODE }}
      with:
        service_account: "${{ secrets.GOOGLE_IMPERSONATE_SERVICE_ACCOUNT_EMAIL }}"
        workload_identity_provider: "${{ secrets.GOOGLE_WORKLOAD_IDENTITY_PROVIDER }}"
    
    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
    
    # Databricks offers Workload Identity Federation from Databricks Accounts
    # to Databricks Workspaces via SCIM connectors to cloud providers. However,
    # Github is not a recognized Identity Federation/Open ID Connect from Databricks Accounts
    # authorization at this time. Therefore, providing client secrets via GA
    # Secrets is necessary until advances are made with Databricks Accounts WIF/OIDC.
    - name: Databricks Accounts Configuration
      run: |
        echo "[${{ inputs.DATABRICKS_PROFILE }}]
        host          = https://accounts.gcp.databricks.com
        account_id    = ${{ secrets.GOOGLE_DATABRICKS_ACCOUNT_ID }}
        client_id     = ${{ secrets.GOOGLE_DATABRICKS_ACCOUNT_CLIENT_ID }}
        client_secret = ${{ secrets.GOOGLE_DATABRICKS_ACCOUNT_CLIENT_SECRET }}
        jobs-api-version = 2.1" > ~/.databrickscfg
    
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
    
    # Terraform Destroy
    - name: Terraform Destroy
      uses: nick-fields/retry@v3
      with:
        timeout_minutes: 5
        max_attempts: 3
        retry_on: error
        command: 'terraform -chdir=test destroy --auto-approve'